#include <utility>

//
// Created by Bartek on 22.03.2024.
//

#ifndef EVILENGINE_INPUTKEY_HPP
#define EVILENGINE_INPUTKEY_HPP

#endif //EVILENGINE_INPUTKEY_HPP


enum class InputKey {
    UNKNOWN,
    KEYBOARD_SPACE,
    KEYBOARD_APOSTROPHE,
    KEYBOARD_COMMA,
    KEYBOARD_MINUS,
    KEYBOARD_PERIOD,
    KEYBOARD_SLASH,
    KEYBOARD_0,
    KEYBOARD_1,
    KEYBOARD_2,
    KEYBOARD_3,
    KEYBOARD_4,
    KEYBOARD_5,
    KEYBOARD_6,
    KEYBOARD_7,
    KEYBOARD_8,
    KEYBOARD_9,
    KEYBOARD_SEMICOLON,
    KEYBOARD_EQUAL,
    KEYBOARD_A,
    KEYBOARD_B,
    KEYBOARD_C,
    KEYBOARD_D,
    KEYBOARD_E,
    KEYBOARD_F,
    KEYBOARD_G,
    KEYBOARD_H,
    KEYBOARD_I,
    KEYBOARD_J,
    KEYBOARD_K,
    KEYBOARD_L,
    KEYBOARD_M,
    KEYBOARD_N,
    KEYBOARD_O,
    KEYBOARD_P ,
    KEYBOARD_Q,
    KEYBOARD_R,
    KEYBOARD_S,
    KEYBOARD_T,
    KEYBOARD_U,
    KEYBOARD_V,
    KEYBOARD_W,
    KEYBOARD_X,
    KEYBOARD_Y,
    KEYBOARD_Z,
    KEYBOARD_LEFT_BRACKET,
    KEYBOARD_BACKSLASH,
    KEYBOARD_RIGHT_BRACKET,
    KEYBOARD_GRAVE_ACCENT,
    KEYBOARD_WORLD_1,
    KEYBOARD_WORLD_2,

/* Function keys */
    KEYBOARD_ESCAPE,
    KEYBOARD_ENTER,
    KEYBOARD_TAB,
    KEYBOARD_BACKSPACE,
    KEYBOARD_INSERT,
    KEYBOARD_DELETE,
    KEYBOARD_RIGHT,
    KEYBOARD_LEFT,
    KEYBOARD_DOWN,
    KEYBOARD_UP,
    KEYBOARD_PAGE_UP,
    KEYBOARD_PAGE_DOWN,
    KEYBOARD_HOME,
    KEYBOARD_END,
    KEYBOARD_CAPS_LOCK,
    KEYBOARD_SCROLL_LOCK,
    KEYBOARD_NUM_LOCK,
    KEYBOARD_PRINT_SCREEN,
    KEYBOARD_PAUSE,
    KEYBOARD_F1,
    KEYBOARD_F2,
    KEYBOARD_F3,
    KEYBOARD_F4,
    KEYBOARD_F5,
    KEYBOARD_F6,
    KEYBOARD_F7,
    KEYBOARD_F8,
    KEYBOARD_F9,
    KEYBOARD_F10,
    KEYBOARD_F11,
    KEYBOARD_F12,
    KEYBOARD_F13,
    KEYBOARD_F14,
    KEYBOARD_F15,
    KEYBOARD_F16,
    KEYBOARD_F17,
    KEYBOARD_F18,
    KEYBOARD_F19,
    KEYBOARD_F20,
    KEYBOARD_F21,
    KEYBOARD_F22,
    KEYBOARD_F23,
    KEYBOARD_F24,
    KEYBOARD_F25,
    KEYBOARD_KP_0,
    KEYBOARD_KP_1,
    KEYBOARD_KP_2,
    KEYBOARD_KP_3,
    KEYBOARD_KP_4,
    KEYBOARD_KP_5,
    KEYBOARD_KP_6,
    KEYBOARD_KP_7,
    KEYBOARD_KP_8,
    KEYBOARD_KP_9,
    KEYBOARD_KP_DECIMAL,
    KEYBOARD_KP_DIVIDE,
    KEYBOARD_KP_MULTIPLY,
    KEYBOARD_KP_SUBTRACT,
    KEYBOARD_KP_ADD,
    KEYBOARD_KP_ENTER,
    KEYBOARD_KP_EQUAL,
    KEYBOARD_LEFT_SHIFT,
    KEYBOARD_LEFT_CONTROL,
    KEYBOARD_LEFT_ALT,
    KEYBOARD_LEFT_SUPER,
    KEYBOARD_RIGHT_SHIFT,
    KEYBOARD_RIGHT_CONTROL,
    KEYBOARD_RIGHT_ALT,
    KEYBOARD_RIGHT_SUPER,
    KEYBOARD_MENU,
    GAMEPAD_L_THUMB_X,
    GAMEPAD_L_THUMB_Y,
    GAMEPAD_R_THUMB_X,
    GAMEPAD_R_THUMB_Y,
    GAMEPAD_NORTH,
    GAMEPAD_SOUTH,
    GAMEPAD_WEST,
    GAMEPAD_EAST,
    GAMEPAD_START,
    GAMEPAD_SELECT,
    GAMEPAD_RB,
    GAMEPAD_LB,
    GAMEPAD_RT,
    GAMEPAD_LT,
    GAMEPAD_DPAD_LEFT,
    GAMEPAD_DPAD_RIGHT,
    GAMEPAD_DPAD_UP,
    GAMEPAD_DPAD_DOWN,
    GAMEPAD_R3,
    GAMEPAD_L3,
    MOUSE_POS_X,
    MOUSE_POS_Y,
    MOUSE_MOVE_X,
    MOUSE_MOVE_Y,
    MOUSE_RIGHT,
    MOUSE_LEFT,
    MOUSE_MIDDLE
};


enum class InputSource {
    KEYBOARD,
    MOUSE,
    GAMEPAD,
    UNKNOWN
};

enum class InputContext {
    CANCELED,
    REPEATED,
    STARTED
};

struct InputAction {
    std::string actionName;
    float scale { 1.f };

    explicit InputAction(std::string  name, float s = 1.f) : actionName(std::move(name)), scale(s) {}
};

InputSource GetInputSourceFromKey (InputKey key);
