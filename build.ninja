# https://ninja-build.org/manual.html
# https://clang.llvm.org/get_started.html
# https://clang.llvm.org/docs/ClangCommandLineReference.html
# https://clang.llvm.org/docs/UsersManual.html
# https://npp-user-manual.org/docs/session/
# https://ninja-build.org/manual.html#ref_rule_command
# https://ninja-build.org/manual.html#ref_dependencies

include .ninja\properties.ninja
include .ninja\secret.ninja

# NINJA

builddir = $buildDirectory

# Linker

linkerLibraries = $
  -l "D:\Storage\Repository\libs\GLFW\3.3.8.bin.WIN64\lib-static-ucrt\glfw3dll" $
  -l kernel32 -l user32 -l gdi32 -l winspool -l shell32 -l ole32 -l oleaut32 -l uuid -l comdlg32 -l advapi32 -l opengl32

# SourceList

sourcePlatformWindows = $
  $projectDirectory\src\main_platform_windows.cpp $
  $imguiIncludePath\imgui_impl_win32.cpp
  
sourcePlatformAgnostic = $
  $projectDirectory\src\main_platform_agnostic.cpp $
  $imguiIncludePath\imgui_impl_glfw.cpp

srcList = $
  $dependencyIncludePath\glad\src\glad.c $
  $imguiIncludePath\imgui.cpp $
  $imguiIncludePath\imgui_demo.cpp $
  $imguiIncludePath\imgui_draw.cpp $
  $imguiIncludePath\imgui_impl_opengl3.cpp $
  $imguiIncludePath\imgui_tables.cpp $
  $imguiIncludePath\imgui_widgets.cpp
  
# IncludeList

# Language Standard

cppStandard = -std=c++20

# Console display error limit

errorLimit = 10

# Debug build path

debugPath = debug

# Windows Terminal Arguments :

tabColor = "#022"

# RULES

rule run_release_winapi
  command = $pathBuildReleaseWinapi
  
rule run_release_glfw
  command = $pathBuildReleaseGlfw
  
rule run_debug_winapi
  command = $pathBuildDebugWinapi
  
rule run_debug_glfw
  command = $pathBuildDebugGlfw
  
rule compile_release_winapi
  command = $compilerPath\clang++ $
  -Wall $cppStandard $
  -ferror-limit=$errorLimit $
  -I $projectIncludePath $
  -I $mstIncludePath $
  -I $spdlogIncludePath $
  -I $glmIncludePath $
  -I $stbIncludePath $
  -I $assimpIncludePath $
  -I $gladIncludePath $
  -I $wglextIncludePath $
  -I $imguiIncludePath $
  -I $freetypeIncludePath $
  $srcList $sourcePlatformWindows $
  -o $pathBuildReleaseWinapi $
  --define-macro SYSTEM_VERSION=$buildMachine $
  --define-macro DEBUG_LEVEL=0 $
  --define-macro PLATFORM=1 $
  $linkerLibraries
  
rule compile_release_glfw
  command = $compilerPath\clang++ $
  -Wall $cppStandard $
  -ferror-limit=$errorLimit $
  -I $projectIncludePath $
  -I $mstIncludePath $
  -I $spdlogIncludePath $
  -I $glmIncludePath $
  -I $stbIncludePath $
  -I $assimpIncludePath $
  -I $gladIncludePath $
  -I $glfwIncludePath $
  -I $imguiIncludePath $
  -I $freetypeIncludePath $
  $srcList $sourcePlatformAgnostic $
  -o $pathBuildReleaseGlfw $
  --define-macro SYSTEM_VERSION=$buildMachine $
  --define-macro DEBUG_LEVEL=0 $
  --define-macro PLATFORM=0 $
  $linkerLibraries
  
rule link
  command = $compilerPath\clang++ $
  -g -o $projectPath\$buildDirectory\$projectTitle.exe $projectPath\$buildDirectory\$projectTitle.o $
  -l "D:\Storage\Repository\libs\VulkanSDK\1.3.224.1\Lib\vulkan-1" $
  -l opengl32 -l glu32 $
  -l "D:\Storage\Repository\libs\GLFW\3.3.8.bin.WIN64\lib-static-ucrt\glfw3dll" $
  -l kernel32 -l user32 -l gdi32 -l winspool -l shell32 -l ole32 -l oleaut32 -l uuid -l comdlg32 -l advapi32
  
# https://releases.llvm.org/13.0.0/tools/clang/docs/ClangCommandLineReference.html#debug-information-generation - debug ref
# https://clang.llvm.org/docs/ClangCommandLineReference.html#preprocessor-flags
rule compile_debug_winapi
  command = $compilerPath\clang++ $
  -Wall $cppStandard $
  -ferror-limit=$errorLimit $
  -I $projectIncludePath $
  -I $mstIncludePath $
  -I $spdlogIncludePath $
  -I $glmIncludePath $
  -I $stbIncludePath $
  -I $assimpIncludePath $
  -I $gladIncludePath $
  -I $wglextIncludePath $
  -I $imguiIncludePath $
  -I $freetypeIncludePath $
  $srcList $sourcePlatformWindows $
  -o $pathBuildDebugWinapi $
  --debug $
  --define-macro SYSTEM_VERSION=$buildMachine $
  --define-macro DEBUG_LEVEL=3 $
  --define-macro PLATFORM=1 $
  $linkerLibraries
  
rule compile_debug_glfw
  command = $compilerPath\clang++ $
  -Wall $cppStandard $
  -ferror-limit=$errorLimit $
  -I $projectIncludePath $
  -I $mstIncludePath $
  -I $spdlogIncludePath $
  -I $glmIncludePath $
  -I $stbIncludePath $
  -I $assimpIncludePath $
  -I $gladIncludePath $
  -I $glfwIncludePath $
  -I $imguiIncludePath $
  -I $freetypeIncludePath $
  $srcList $sourcePlatformAgnostic $
  -o $pathBuildDebugGlfw $
  --debug $
  --define-macro SYSTEM_VERSION=$buildMachine $
  --define-macro DEBUG_LEVEL=3 $
  --define-macro PLATFORM=0 $
  $linkerLibraries

rule clear
  command = rm $projectPath\$buildDirectory\$projectTitle.exe
  
# Setups project path in .ninja/secret.ninja
rule setup
  command = cmd /c wt -w 1 $
  --title $projectTitle $
  --tabColor $tabColor $
  $toolsPath --setup %cd%
  
rule refresh
  command = cmd /c $toolsPath --refresh-npp $
  $projectName.npp $
  $projectPath\$projectDirectory $mstPath
  
# https://docs.microsoft.com/en-us/cpp/build/understanding-manifest-generation-for-c-cpp-programs?view=msvc-170
rule add_manifest
  command = cmd /c $mt -manifest $
  $projectPath\$projectDirectory\$projectTitle.exe.manifest $
  -outputresource:$projectPath\$buildDirectory\$projectTitle.exe;1
  
  
# https://docs.microsoft.com/en-us/windows/win32/menurc/using-rc-the-rc-command-line-
# https://digitalmars.com/ctg/ctgRC.html
# https://stackoverflow.com/questions/4291526/how-do-i-link-a-rc-resource-file-when-compiling-a-win32-app-with-gcc-through
# https://stackoverflow.com/questions/25160245/clang-linking-with-a-so-file
  
rule compile_resource
  command = $rc -X $
  -I "$winIncludePath\shared" $
  -I "$winIncludePath\um" $
  -R "$projectPath\$projectDirectory\inc\resources\$projectTitle.rc" 
  
# BUILDS

# GLFW BUILDS
build bld-agnostic : compile_release_glfw
build dbb-agnostic : compile_debug_glfw
build run-agnostic : run_release_glfw
build dbr-agnostic : run_debug_glfw

# WINDOWS OS BUILDS
build bld-windows : compile_release_winapi
build dbb-windows : compile_debug_winapi
build run-windows : run_release_winapi
build dbr-windows : run_debug_winapi

# OTHER
build rsh : refresh
build cls : clear
build stp : setup
build crs : compile_resource
build adm : add_manifest


